---
features:
  - |
    The PyTorch connector :class:`~qiskit_machine_learning.connector.TorchConnector` now fully
    supports sparse output in both forward and backward passes. To enable sparse support, first of
    all, the underlying quantum neural network must be sparse. In this case, if the `sparse`
    property of the connector itself is not set, then the connector inherits sparsity from the
    networks. If the connector is set to be sparse, but the network is not, an exception will be
    raised. Also you may set the connector to be dense if the network is sparse.

    This snippet illustrates how to create a sparse instance of the connector.

    .. code-block:: python

      import torch
      from qiskit import QuantumCircuit
      from qiskit.circuit.library import ZFeatureMap, RealAmplitudes

      from qiskit_machine_learning.connectors import TorchConnector
      from qiskit_machine_learning.neural_networks import SamplerQNN

      num_qubits = 2
      fmap = ZFeatureMap(num_qubits, reps=1)
      ansatz = RealAmplitudes(num_qubits, reps=1)
      qc = QuantumCircuit(num_qubits)
      qc.compose(fmap, inplace=True)
      qc.compose(ansatz, inplace=True)

      qnn = SamplerQNN(
          circuit=qc,
          input_params=fmap.parameters,
          weight_params=ansatz.parameters,
          sparse=True,
      )

      connector = TorchConnector(qnn)

      output = connector(torch.tensor([[1., 2.]]))
      print(output)

      loss = torch.sparse.sum(output)
      loss.backward()

      grad = connector.weight.grad
      print(grad)

    In hybrid setup, where a PyTorch-based neural network has classical and quantum layers, sparse
    operations should not be mixed with dense ones, otherwise exceptions may be thrown by PyTorch.

    Sparse support works on python 3.8+.
