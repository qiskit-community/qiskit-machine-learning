---
features:
  - |
    Introduced Estimator Quantum Neural Network
    (:class:`~qiskit_machine_learning.neural_networks.EstimatorQNN`) based on (runtime) primitives.
    This implementation leverages the estimator primitive
    (see :class:`~qiskit.primitives.BaseEstimator`) and the estimator gradients
    (see :class:`~qiskit.algorithms.gradients.BaseEstimatorGradient`) to enable runtime access and
    more efficient computation of forward and backward passes.

    The new :class:`~qiskit_machine_learning.neural_networks.EstimatorQNN` exposes a similar
    interface to the Opflow QNN, with a few differences.
    One is the `quantum_instance` parameter. This parameter does not have a direct replacement,
    and instead the `estimator` parameter must be used. The `gradient` parameter keeps the same name
    as in the Opflow QNN implementation, but it no longer accepts Opflow gradient classes as inputs;
    instead, this parameter expects an (optionally custom) primitive gradient.

    The existing training algorithms such as :class:`~qiskit_machine_learning.algorithms.VQR`,
    that were based on the Opflow QNN, are updated to accept both implementations. The implementation
    of :class:`~qiskit_machine_learning.algorithms.NeuralNetworkRegressor` has not changed.

    For example a `VQR` using `EstimatorQNN` can be trained as follows:

    .. code-block:: python

      import numpy as np

      from qiskit.algorithms.optimizers import L_BFGS_B
      from qiskit.circuit import QuantumCircuit, Parameter
      from qiskit.primitives import Estimator

      from qiskit_machine_learning.algorithms import VQR

      num_samples = 20
      eps = 0.2
      lb, ub = -np.pi, np.pi
      X = (ub - lb) * np.random.rand(num_samples, 1) + lb
      Y = np.sin(X[:, 0]) + eps * (2 * np.random.rand(num_samples) - 1)

      params = [Parameter("θ_0"), Parameter("θ_1")]
      feature_map = QuantumCircuit(1, name="fm")
      feature_map.ry(params[0], 0)
      ansatz = QuantumCircuit(1, name="vf")
      ansatz.ry(params[1], 0)

      vqr = VQR(
          feature_map=feature_map,
          ansatz=ansatz,
          optimizer=L_BFGS_B(maxiter=5),
          initial_point=np.array([0]),
          estimator=Estimator()
      )
      vqr.fit(X, Y)
